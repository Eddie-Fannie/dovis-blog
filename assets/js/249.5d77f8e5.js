(window.webpackJsonp=window.webpackJsonp||[]).push([[249],{526:function(t,e,s){"use strict";s.r(e);var n=s(10),a=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"node基础知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node基础知识"}},[t._v("#")]),t._v(" Node基础知识")]),t._v(" "),e("h2",{attrs:{id:"filename变量与-dirname变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#filename变量与-dirname变量"}},[t._v("#")]),t._v(" __filename变量与__dirname变量")]),t._v(" "),e("blockquote",[e("p",[t._v("在"),e("code",[t._v("Node.js")]),t._v("中，预定义了两个变量：用于获取当前模块文件名的"),e("code",[t._v("__filename")]),t._v("变量与用于获取当前目录名的"),e("code",[t._v("__dirname")]),t._v("变量。")])]),t._v(" "),e("h2",{attrs:{id:"eventemitter-类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter-类"}},[t._v("#")]),t._v(" EventEmitter 类")]),t._v(" "),e("blockquote",[e("p",[t._v("在"),e("code",[t._v("Node.js")]),t._v("的用于实现各种事件处理的"),e("code",[t._v("event")]),t._v("模块中，定义了一个"),e("code",[t._v("EventEmitter")]),t._v("类。所有可能触发事件的对象都是一个继承了"),e("code",[t._v("EventEmitter")]),t._v("类的子类的实例对象，在"),e("code",[t._v("Node.js")]),t._v("中，为"),e("code",[t._v("EventEmitter")]),t._v("类定义了许多方法，所有与对象的事件处理函数的绑定及解除相关的处理均依靠这些方法的调用来执行。")])]),t._v(" "),e("p",[t._v("当需要对指定事件绑定事件处理函数时，可以使用"),e("code",[t._v("EventEmitter")]),t._v("类的"),e("code",[t._v("on")]),t._v("方法或"),e("code",[t._v("addListener")]),t._v("方法。这两个方法的区别仅在于方法名而已，内部实现同样的处理。")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("emitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listener"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nemitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("addListener")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listener"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("blockquote",[e("p",[t._v("这两个方法均使用两个参数，其中第一个参数为指定事件名，第二个参数为该事件的事件处理函数。在默认情况下，针对同一个指定事件，最多可以绑定"),e("code",[t._v("10")]),t._v("个事件处理函数。可以通过"),e("code",[t._v("setMaxListeners")]),t._v("方法修改最多可以绑定的事件处理函数数量")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("emitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMaxListeners")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("blockquote",[e("p",[t._v("当需要取得一个指定事件的所有事件处理函数时，可以使用"),e("code",[t._v("listeners")]),t._v("方法，"),e("code",[t._v("listeners")]),t._v("方法使用一个参数，参数值为指定事件名。该方法返回由该事件的所有事件处理函数构成的数组。")])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("EventEmitter")]),t._v("类的"),e("code",[t._v("once")]),t._v("方法与"),e("code",[t._v("on")]),t._v("方法类似，作用均为对指定事件绑定事件处理函数，区别在于，当事件处理函数执行一次后立即被解除，即该事件处理函数只会被执行一次。")])]),t._v(" "),e("blockquote",[e("p",[t._v("当需要对某个事件解除某个事件处理函数时，可以使用"),e("code",[t._v("EventEmitter")]),t._v("类的"),e("code",[t._v("removeListener")]),t._v("方法。可以使用"),e("code",[t._v("EventEmitter")]),t._v("类的"),e("code",[t._v("removeAllListeners")]),t._v("方法取消某个事件的所有已被指定事件处理函数或所有已被指定的事件处理函数。"),e("strong",[t._v("在"),e("code",[t._v("removeAllListeners")]),t._v("方法中，可以使用一个参数，参数值为需要被解除事件处理函数的事件名。如果在"),e("code",[t._v("removeAllListeners")]),t._v("方法中使用事件名参数时，将取消该事件的所有事件处理函数；如果在"),e("code",[t._v("removeAllListeners")]),t._v("方法中不使用事件名参数时，将取消所有已被指定的事件。")])])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("emitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeListener")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listener"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nemitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeAllListeners")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("event"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("blockquote",[e("p",[t._v("当你需要手工触发某个对象的一个事件时，可以使用"),e("code",[t._v("EventEmitter")]),t._v("类的"),e("code",[t._v("emit")]),t._v("方法。在"),e("code",[t._v("emit")]),t._v("方法中可以使用一个或多个参数，其中第一个参数值为需要手工触发的事件名，从第二个参数开始为需要传递给事件处理函数的参数。")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("emitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arg1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arg2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("blockquote",[e("p",[e("code",[t._v("EventEmitter")]),t._v("类自身拥有一个"),e("code",[t._v("listenerCount")]),t._v("方法，可用来获取某个对象的指定事件的事件处理函数的数量。"),e("strong",[t._v("在"),e("code",[t._v("listenerCount")]),t._v("方法中，使用两个参数，其中第一个参数用于指定需要获取哪个对象的事件处理函数的数量，第二个参数用于指定需要获取哪个事件的事件处理函数的数量。")])])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("EventEmitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("listenerCount")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" event"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("blockquote",[e("p",[t._v("在"),e("code",[t._v("events")]),t._v("模块中，为"),e("code",[t._v("EventEmitter")]),t._v("类本身定义了两个事件："),e("code",[t._v("newListener")]),t._v("事件与"),e("code",[t._v("removeListener")]),t._v("事件。任何时候，当对继承了"),e("code",[t._v("EventEmitter")]),t._v("类的子类实例对象绑定事件处理函数时，都将触发"),e("code",[t._v("EventEmitter")]),t._v("类的"),e("code",[t._v("newListener")]),t._v("事件。任何时候，当对继承了"),e("code",[t._v("EventEmitter")]),t._v("类的子类实例对象取消事件处理函数时，都将触发"),e("code",[t._v("EventEmitter")]),t._v("类的"),e("code",[t._v("removeListener")]),t._v("事件")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("emitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'newListener'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("f")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 事件处理函数代码")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nemitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'removeListener'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("f")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 事件处理函数代码")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("h3",{attrs:{id:"事件环机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件环机制"}},[t._v("#")]),t._v(" 事件环机制")]),t._v(" "),e("blockquote",[e("p",[t._v("在"),e("code",[t._v("Node.js")]),t._v("中，采用非阻塞型"),e("code",[t._v("I/O")]),t._v("机制，这意味着所有要求应用程序所进行的处理，如"),e("code",[t._v("HTTP")]),t._v("请求、数据库查询、文件的输入/输出等，都不会在处理结束之前阻碍其他处理的进行，也就是说，这些处理都是独立进行的，当处理结束时，会触发一个回调事件，也就是说，在"),e("code",[t._v("Node.js")]),t._v("中，我们所要编写的是各种"),e("code",[t._v("I/O")]),t._v("事件的回调函数中的处理。")])]),t._v(" "),e("h2",{attrs:{id:"使用buffer类处理二进制数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用buffer类处理二进制数据"}},[t._v("#")]),t._v(" 使用"),e("code",[t._v("Buffer")]),t._v("类处理二进制数据")]),t._v(" "),e("blockquote",[e("p",[t._v("在处理"),e("code",[t._v("TCP")]),t._v("流或文件流时，必须要处理二进制数据。因此，在"),e("code",[t._v("Node.js")]),t._v("中，定义了一个"),e("code",[t._v("Buffer")]),t._v("类，该类用来创建一个专门存放二进制数据的缓存区。")])])])}),[],!1,null,null,null);e.default=a.exports}}]);