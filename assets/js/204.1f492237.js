(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{477:function(v,e,_){"use strict";_.r(e);var t=_(10),s=Object(t.a)({},(function(){var v=this,e=v._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("p",[v._v("如何才能让我们的工程在使用模块化的同时也能正常运行在浏览器中呢？模块打包工具闪亮登场。模块打包工具（"),e("code",[v._v("module bundler")]),v._v("）的任务就是解决模块间的依赖，使其打包后的结果能运行在浏览器上。它的工作方式主要分为两种。")]),v._v(" "),e("ul",[e("li",[v._v("将存在依赖关系的模块按照特定规则合并为单个 "),e("code",[v._v("JS")]),v._v(" 文件，一次全部加载进页面中。")]),v._v(" "),e("li",[v._v("在页面初始时加载一个入口模块，异步加载其他模块。")])]),v._v(" "),e("h1",{attrs:{id:"webpack学习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack学习"}},[v._v("#")]),v._v(" webpack学习")]),v._v(" "),e("blockquote",[e("p",[e("code",[v._v("Webpack")]),v._v(" 是一个开源的JavaScript模块打包工具，其最核心的功能是解决模块之间的依赖，把各个模块按照特定的规则和顺序组织在一起，最终合并为一个"),e("code",[v._v("JS")]),v._v("文件（有时会有多个，这里讨论的只是最基本的情况）。这个过程就叫作模块打包。你可以把 "),e("code",[v._v("Webpack")]),v._v(" 理解为一个模块处理工厂。我们把源代码交给 "),e("code",[v._v("Webpack")]),v._v(" ，由它去进行加工、拼装处理，产出最终的资源文件，等待送往用户。")])]),v._v(" "),e("p",[e("code",[v._v("webpack")]),v._v("优势：")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("Webpack")]),v._v(" 默认支持多种模块标准，包括 "),e("code",[v._v("AMD")]),v._v("、"),e("code",[v._v("CommonJS")]),v._v(" 以及最新的 "),e("code",[v._v("ES6")]),v._v(" 模块，而其他工具大多只能支持一到两种。"),e("code",[v._v("Webpack")]),v._v("对于一些同时使用多种模块标准的工程非常有用，它会帮我们处理好不同类型模块之间的依赖关系。")]),v._v(" "),e("li",[e("code",[v._v("Webpack")]),v._v(" 有完备的代码分片解决方案。从字面意思去理解，它可以分割打包后的资源，在首屏只加载必要的部分，将不太重要的功能放到后面动态加载。这对于资源体积较大的应用来说尤为重要，可以有效地减小资源体积，提升首页渲染速度。")]),v._v(" "),e("li",[e("code",[v._v("Webpack")]),v._v(" 可以处理各种类型的资源。除了 "),e("code",[v._v("JavaScript")]),v._v(" 以外，"),e("code",[v._v("Webpack")]),v._v(" 还可以处理样式、模板，甚至图片等，而开发者需要做的仅仅是导入它们。比如你可以从 "),e("code",[v._v("JavaScript")]),v._v("文件导入一个 "),e("code",[v._v("CSS")]),v._v(" 或者 "),e("code",[v._v("PNG")]),v._v(" ，而这一切最终都可以由 "),e("code",[v._v("loader")]),v._v(" 来处理。")]),v._v(" "),e("li",[e("code",[v._v("Webpack")]),v._v(" 拥有庞大的社区支持。除了 "),e("code",[v._v("Webpack")]),v._v(" 核心库以外，还有无数开发者来为它编写周边插件和工具。对于绝大多数的需求，你都可以直接在社区找到已有解决方案，甚至会找到多个解决方案。")])]),v._v(" "),e("p",[e("code",[v._v("webpack")]),v._v("相关注意点：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("scripts")]),v._v(" 是 "),e("code",[v._v("npm")]),v._v(" 提供的脚本命令功能，在这里我们可以直接使用由模块添加的指令")]),v._v(" "),e("li",[e("code",[v._v("Webpack")]),v._v(" 对于 "),e("code",[v._v("output.path")]),v._v(" 的要求是使用绝对路径（从系统根目录开始的完整路径），之前我们在命令行中为了简洁而使用了相对路径。而在 "),e("code",[v._v("webpack.config.js")]),v._v(" 中，我们通过调用 "),e("code",[v._v("Node.js")]),v._v(" 的路径拼装函数 "),e("code",[v._v("path.join")]),v._v(" ，将 "),e("code",[v._v("__dirname")]),v._v("（"),e("code",[v._v("Node.js")]),v._v("内置全局变量，"),e("strong",[v._v("值为当前文件所在的绝对路径")]),v._v("）与 "),e("code",[v._v("dist")]),v._v("（输出目录）连接起来，得到了最终的资源输出路径。")]),v._v(" "),e("li",[v._v("直接用 "),e("code",[v._v("Webpack")]),v._v(" 开发和使用 "),e("code",[v._v("webpack-dev-server")]),v._v(" 有一个很大的区别，前者每次都会生成构建产物，而 "),e("code",[v._v("webpack-dev-server")]),v._v(" 只是将打包结果放在内存中，并不会写入实际的 "),e("code",[v._v("bundle.js")]),v._v("，在每次 "),e("code",[v._v("webpack-dev-server")]),v._v(" 接收到请求时都只是将内存中的打包结果返回给浏览器。")]),v._v(" "),e("li",[e("code",[v._v("chunk")]),v._v(" 字面的意思是代码块，在 "),e("code",[v._v("Webpack")]),v._v(" 中可以理解成被抽象和包装后的一些模块。它就像一个装着很多文件的文件袋，里面的文件就是各个模块，"),e("code",[v._v("Webpack")]),v._v(" 在外面加了一层包裹，从而形成了 "),e("code",[v._v("chunk")]),v._v(" 。根据具体配置不同，一个工程打包时可能会产生一个或多个 "),e("code",[v._v("chunk")]),v._v(" 。"),e("strong",[e("code",[v._v("Webpack")]),v._v(" 会从入口文件开始检索，并将具有依赖关系的模块生成一棵依赖树，最终得到一个 "),e("code",[v._v("chunk")]),v._v(" 。我们一般将由这个 "),e("code",[v._v("chunk")]),v._v(" 得到的打包产物称为 "),e("code",[v._v("bundle")]),v._v(" 。")])])]),v._v(" "),e("h2",{attrs:{id:"webpack-运行机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-运行机制"}},[v._v("#")]),v._v(" webpack 运行机制")]),v._v(" "),e("p",[e("code",[v._v("webpack")]),v._v(" 运行流程简图")]),v._v(" "),e("p",[e("img",{attrs:{src:"/dovis-blog/webpack/1.png",alt:"img"}})]),v._v(" "),e("p",[e("code",[v._v("webpack")]),v._v("会在各个生命周期中广播事件，插件监听到对应的事件便会触发\n"),e("img",{attrs:{src:"/dovis-blog/webpack/2.png",alt:"img"}})]),v._v(" "),e("p",[e("strong",[e("code",[v._v("webpack")]),v._v(" 构建流程")]),v._v(" "),e("code",[v._v("webpack")]),v._v(" 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),v._v(" "),e("ul",[e("li",[v._v("初始化参数：从配置文件和 "),e("code",[v._v("shell")]),v._v(" 语句中读取并合并参数，得出最终的参数。")]),v._v(" "),e("li",[v._v("开始编译：用上一步得到的参数初始化"),e("code",[v._v("compiler")]),v._v("对象，加载所有配置的插件，执行对象的"),e("code",[v._v("run")]),v._v("方法开始编译。")]),v._v(" "),e("li",[v._v("确定入口：根据配置的"),e("code",[v._v("entry")]),v._v("找出所有的入口文件。")]),v._v(" "),e("li",[v._v("编译模块：从入口文件出发，调用所有配置的"),e("code",[v._v("Loader")]),v._v("对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都被处理。")]),v._v(" "),e("li",[v._v("完成模块编译：在经过上一步之后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。")]),v._v(" "),e("li",[v._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的"),e("code",[v._v("chunk")]),v._v("，再把每个"),e("code",[v._v("chunk")]),v._v("转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会。")]),v._v(" "),e("li",[v._v("输出完成：在确定好输出内容后，根据配置确定输出路径和文件名，把文件内容写入到文件系统。")])]),v._v(" "),e("p",[v._v("在以上过程中，"),e("code",[v._v("webpack")]),v._v("会在特定的时间点广播出特定的事件，插件在监听到绑定的事件后会执行特定的逻辑，并且插件可以调用"),e("code",[v._v("webpack")]),v._v("提供的"),e("code",[v._v("API")]),v._v("改变"),e("code",[v._v("Webpack")]),v._v("的运行结果。")]),v._v(" "),e("p",[e("strong",[e("code",[v._v("webpack")]),v._v(" 打包原理")])]),v._v(" "),e("ol",[e("li",[v._v("识别入口文件")]),v._v(" "),e("li",[v._v("通过逐层识别模块依赖，"),e("code",[v._v("commonjs、amd、import")]),v._v("等进行分析，获取代码依赖")]),v._v(" "),e("li",[e("code",[v._v("Webpack")]),v._v("做的就是分析代码，转换代码，编译代码，输出代码")]),v._v(" "),e("li",[v._v("最终形成打包后的代码")])]),v._v(" "),e("h2",{attrs:{id:"plugin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[v._v("#")]),v._v(" "),e("code",[v._v("plugin")])]),v._v(" "),e("blockquote",[e("p",[v._v("用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括打包优化，资源管理，注入环境变量。想要使用一个插件，只需要"),e("code",[v._v("require()")]),v._v("它，然后把它添加到"),e("code",[v._v("plugins")]),v._v("数组中。\n基于事件流框架 "),e("code",[v._v("Tapable")]),v._v("，插件可以扩展"),e("code",[v._v("Webpack")]),v._v("的功能，在"),e("code",[v._v("webpack")]),v._v("运行的生命周期中会广播出许多事件，"),e("code",[v._v("plugin")]),v._v("可以监听这些事件，在合适的时机通过"),e("code",[v._v("Webpack")]),v._v("提供的"),e("code",[v._v("API")]),v._v("改变输出结果")])]),v._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("const")]),v._v(" HtmlWebpackPlugin "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v("'html-webpack-plugin'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 通过 npm 安装")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("const")]),v._v(" webpack "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v("'webpack'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 用于访问内置插件")]),v._v("\n\nmodule"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[v._v("module")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[v._v("rules")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[v._v("test")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[v._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[v._v("\\.txt$")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[v._v("/")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[v._v("use")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[v._v("'raw-loader'")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[v._v("plugins")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("HtmlWebpackPlugin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[v._v("template")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[v._v("'./src/index.html'")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br"),e("span",{staticClass:"line-number"},[v._v("2")]),e("br"),e("span",{staticClass:"line-number"},[v._v("3")]),e("br"),e("span",{staticClass:"line-number"},[v._v("4")]),e("br"),e("span",{staticClass:"line-number"},[v._v("5")]),e("br"),e("span",{staticClass:"line-number"},[v._v("6")]),e("br"),e("span",{staticClass:"line-number"},[v._v("7")]),e("br"),e("span",{staticClass:"line-number"},[v._v("8")]),e("br"),e("span",{staticClass:"line-number"},[v._v("9")]),e("br")])]),e("h2",{attrs:{id:"loader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[v._v("#")]),v._v(" "),e("code",[v._v("loader")])]),v._v(" "),e("blockquote",[e("p",[v._v("本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。对其他类型的资源进行转译对预处理工作。")])]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),e("p",[v._v("那么 "),e("code",[v._v("loader")]),v._v(" 是一个纯函数吗？\n"),e("code",[v._v("Loader")]),v._v(" 不是纯函数，主要有两个原因：")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("loader")]),v._v(" 有执行上下文（ "),e("code",[v._v("context")]),v._v(" )，也就是通过"),e("code",[v._v("this")]),v._v("访问内置的属性和方法，以实现特定的功能")]),v._v(" "),e("li",[e("code",[v._v("loader")]),v._v("的 "),e("code",[v._v("return")]),v._v(" 语句不一定有返回")])])]),v._v(" "),e("h2",{attrs:{id:"文件指纹"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件指纹"}},[v._v("#")]),v._v(" 文件指纹")]),v._v(" "),e("p",[v._v("文件指纹是打包后输出的文件名的后缀。\n"),e("code",[v._v("Hash")]),v._v("：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 "),e("code",[v._v("hash")]),v._v(" 值就会更改\n"),e("code",[v._v("Chunkhash")]),v._v("：和 "),e("code",[v._v("Webpack")]),v._v(" 打包的 "),e("code",[v._v("chunk")]),v._v(" 有关，不同的 "),e("code",[v._v("entry")]),v._v(" 会生出不同的 "),e("code",[v._v("chunkhash")]),v._v(" "),e("code",[v._v("Contenthash")]),v._v("：根据文件内容来定义 "),e("code",[v._v("hash")]),v._v("，文件内容不变，则 "),e("code",[v._v("contenthash")]),v._v(" 不变")]),v._v(" "),e("h2",{attrs:{id:"优化-webpack-构建速度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化-webpack-构建速度"}},[v._v("#")]),v._v(" 优化 "),e("code",[v._v("webpack")]),v._v(" 构建速度")]),v._v(" "),e("ul",[e("li",[v._v("使用高版本的 "),e("code",[v._v("Webpack")]),v._v(" 和 "),e("code",[v._v("Node.js")])]),v._v(" "),e("li",[v._v("多进程/多实例构建： "),e("code",[v._v("thread-loader")])])]),v._v(" "),e("ul",[e("li",[v._v("压缩代码\n"),e("ul",[e("li",[v._v("多进程并行压缩")]),v._v(" "),e("li",[e("code",[v._v("webpack-parallel-uglify-plugin")])]),v._v(" "),e("li",[e("code",[v._v("uglifyjs-webpack-plugin")]),v._v(" 开启 "),e("code",[v._v("parallel")]),v._v(" 参数 (不支持 "),e("code",[v._v("ES6")]),v._v(" )")]),v._v(" "),e("li",[e("code",[v._v("terser-webpack-plugin")]),v._v(" 开启 "),e("code",[v._v("parallel")]),v._v(" 参数")]),v._v(" "),e("li",[v._v("通过 "),e("code",[v._v("mini-css-extract-plugin")]),v._v(" 提取 "),e("code",[v._v("Chunk")]),v._v(" 中的 "),e("code",[v._v("CSS")]),v._v(" 代码到单独文件，通过 "),e("code",[v._v("css-loader")]),v._v(" 的 "),e("code",[v._v("minimize")]),v._v(" 选项开启 "),e("code",[v._v("cssnano")]),v._v(" 压缩 "),e("code",[v._v("CSS")]),v._v("。")])])]),v._v(" "),e("li",[v._v("缩小打包作用域：\n"),e("ul",[e("li",[e("code",[v._v("exclude/include")]),v._v(" (确定 "),e("code",[v._v("loader")]),v._v(" 规则范围)")]),v._v(" "),e("li",[e("code",[v._v("resolve.modules")]),v._v(" 指明第三方模块的绝对路径 (减少不必要的查找)")]),v._v(" "),e("li",[e("code",[v._v("resolve.mainFields")]),v._v(" 只采用 "),e("code",[v._v("main")]),v._v(" 字段作为入口文件描述字段 (减少搜索步骤，需要考虑到所有运行时依赖的第三方模块的入口文件描述字段)")]),v._v(" "),e("li",[e("code",[v._v("resolve.extensions")]),v._v(" 尽可能减少后缀尝试的可能性")]),v._v(" "),e("li",[e("code",[v._v("noParse")]),v._v(" 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 "),e("code",[v._v("bundle")]),v._v(" 中，注意被忽略掉的文件里不应该包含 "),e("code",[v._v("import、require、define")]),v._v(" 等模块化语句)")]),v._v(" "),e("li",[v._v("合理使用 "),e("code",[v._v("alias")])])])]),v._v(" "),e("li",[v._v("基础包分离：\n"),e("ul",[e("li",[v._v("使用 "),e("code",[v._v("html-webpack-externals-plugin")]),v._v("，将基础包通过 "),e("code",[v._v("CDN")]),v._v(" 引入，不打入 "),e("code",[v._v("bundle")]),v._v(" 中")]),v._v(" "),e("li",[v._v("使用 "),e("code",[v._v("SplitChunks")]),v._v(" 进行(公共脚本、基础包、页面公共文件)分离")])])]),v._v(" "),e("li",[e("code",[v._v("DLL")]),v._v("：\n"),e("ul",[e("li",[v._v("使用 "),e("code",[v._v("DllPlugin")]),v._v(" 进行分包，使用 "),e("code",[v._v("DllReferencePlugin")]),v._v("(索引链接) 对 "),e("code",[v._v("manifest.json")]),v._v(" 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。")]),v._v(" "),e("li",[e("code",[v._v("HashedModuleIdsPlugin")]),v._v(" 可以解决模块数字id问题")])])]),v._v(" "),e("li",[v._v("充分利用缓存提升二次构建速度：\n"),e("ul",[e("li",[e("code",[v._v("babel-loader")]),v._v(" 开启缓存")]),v._v(" "),e("li",[v._v("使用 "),e("code",[v._v("cache-loader")])])])]),v._v(" "),e("li",[e("code",[v._v("Tree shaking")]),v._v(" "),e("ul",[e("li",[v._v("打包过程中检测工程中没有引用过的模块并进行标记，在资源压缩时将它们从最终的 "),e("code",[v._v("bundle")]),v._v(" 中去掉(只能对 "),e("code",[v._v("ES6 Module")]),v._v(" 生效) 开发中尽可能使用 "),e("code",[v._v("ES6 Module")]),v._v(" 的模块，提高 "),e("code",[v._v("tree shaking")]),v._v(" 效率")]),v._v(" "),e("li",[v._v("禁用 "),e("code",[v._v("babel-loader")]),v._v(" 的模块依赖解析，否则 "),e("code",[v._v("Webpack")]),v._v(" 接收到的就都是转换过的 "),e("code",[v._v("CommonJS")]),v._v(" 形式的模块，无法进行 "),e("code",[v._v("tree-shaking")])])])]),v._v(" "),e("li",[e("code",[v._v("Scope hoisting")]),v._v(" "),e("ul",[e("li",[v._v("构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销变大。"),e("code",[v._v("Scope hoisting")]),v._v(" 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突")]),v._v(" "),e("li",[v._v("必须是 "),e("code",[v._v("ES6")]),v._v(" 的语法，因为有很多第三方库仍采用 "),e("code",[v._v("CommonJS")]),v._v(" 语法，为了充分发挥 "),e("code",[v._v("Scope hoisting")]),v._v(" 的作用，需要配置 "),e("code",[v._v("mainFields")]),v._v(" 对第三方模块优先采用 "),e("code",[v._v("jsnext:main")]),v._v(" 中指向的 "),e("code",[v._v("ES6")]),v._v(" 模块化语法")])])])]),v._v(" "),e("h1",{attrs:{id:"vite-学习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vite-学习"}},[v._v("#")]),v._v(" vite 学习")]),v._v(" "),e("blockquote",[e("p",[e("code",[v._v("vite")]),v._v(" 在开发环境和生产环境分别做了不同的处理，在开发环境中底层基于 "),e("code",[v._v("esBuild")]),v._v(" 进行提速，在生产环境中使用 "),e("code",[v._v("rollup")]),v._v(" 进行打包。")])]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("esBuild")]),v._v(" 是选择 "),e("code",[v._v("Go")]),v._v(" 语言编写的，而在 "),e("code",[v._v("esBuild")]),v._v(" 之前，前端构建工具都是基于 "),e("code",[v._v("Node")]),v._v("，使用 "),e("code",[v._v("JS")]),v._v(" 进行编写。"),e("code",[v._v("JavaScript")]),v._v(" 是一门解释性脚本语言，即使 "),e("code",[v._v("V8")]),v._v(" 引擎做了大量优化（"),e("code",[v._v("JWT")]),v._v(" 及时编译），本质上还是无法打破性能的瓶颈。而 "),e("code",[v._v("Go")]),v._v(" 是一种编译型语言，在编译阶段就已经将源码转译为机器码，启动时只需要直接执行这些机器码即可。")]),v._v(" "),e("li",[e("code",[v._v("Go")]),v._v(" 天生具有多线程运行能力，而 "),e("code",[v._v("JavaScript")]),v._v(" 本质上是一门单线程语言。"),e("code",[v._v("esBuild")]),v._v(" 经过精心的设计，将代码 "),e("code",[v._v("parse")]),v._v("、代码生成等过程实现完全并行处理。")])])]),v._v(" "),e("h2",{attrs:{id:"为什么-vite-开发服务这么快"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么-vite-开发服务这么快"}},[v._v("#")]),v._v(" 为什么 vite 开发服务这么快")]),v._v(" "),e("p",[v._v("传统 "),e("code",[v._v("bundle based")]),v._v(" 服务：")]),v._v(" "),e("ul",[e("li",[v._v("无论是 "),e("code",[v._v("webpack")]),v._v(" 还是 "),e("code",[v._v("rollup")]),v._v(" 提供给开发者使用的服务，都是基于构建结果的。")]),v._v(" "),e("li",[v._v("基于构建结果提供服务，意味着提供服务前一定要构建结束，随着项目膨胀，等待时间也会逐渐变长。")])]),v._v(" "),e("p",[e("code",[v._v("noBundle")]),v._v(" 服务：")]),v._v(" "),e("ul",[e("li",[v._v("对于 "),e("code",[v._v("vite")]),v._v("、"),e("code",[v._v("snowpack")]),v._v(" 这类工具，提供的都是 "),e("code",[v._v("noBundle")]),v._v(" 服务，无需等待构建，直接提供服务。")]),v._v(" "),e("li",[v._v("对于项目中的第三方依赖，仅在初次启动和依赖变化时重构建，会执行一个依赖预构建的过程。由于是基于 "),e("code",[v._v("esBuild")]),v._v(" 做的构建所以非常快。"),e("strong",[v._v("在启动服务器之前会先读取你的 "),e("code",[v._v("package.json")]),v._v(" 文件，识别出需要进行预编译的包，先进行预编译之后，再去启动服务器。"),e("code",[v._v("Vite")]),v._v(" 在预构建阶段，将构建后的依赖缓存到 "),e("code",[v._v("node_modules/.vite")]),v._v("，相关配置更改时，或手动控制时才会重新构建，以提升预构建速度。")])]),v._v(" "),e("li",[v._v("对于项目代码，则会依赖于浏览器的 "),e("code",[v._v("ESM")]),v._v(" 的支持，直接按需访问，不必全量构建。"),e("strong",[v._v("服务器只在接受到 "),e("code",[v._v("import")]),v._v(" 请求的时候，才会编译对应的文件，将 "),e("code",[v._v("ESM")]),v._v(" 源码返回给浏览器，实现真正的按需加载。")])]),v._v(" "),e("li",[v._v("充分利用 "),e("code",[v._v("http")]),v._v(" 缓存做优化，依赖（不会变动的代码）部分用 "),e("code",[v._v("max-age,immutable")]),v._v(" 强缓存，源码部分用 "),e("code",[v._v("304")]),v._v(" 协商缓存，提升页面打开速度。")])]),v._v(" "),e("h2",{attrs:{id:"为什么生产环境要用-rollup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么生产环境要用-rollup"}},[v._v("#")]),v._v(" 为什么生产环境要用 rollup")]),v._v(" "),e("ul",[e("li",[v._v("由于浏览器的兼容性问题以及实际网络中使用 "),e("code",[v._v("ESM")]),v._v(" 可能会造成 "),e("code",[v._v("RTT")]),v._v(" 时间过长，所以仍然需要打包构建。")]),v._v(" "),e("li",[e("code",[v._v("esbuild")]),v._v(" 虽然快，但是它还没有发布 1.0 稳定版本，另外 "),e("code",[v._v("esbuild")]),v._v(" 对代码分割和 "),e("code",[v._v("css")]),v._v(" 处理等支持较弱，所以生产环境仍然使用 "),e("code",[v._v("rollup")]),v._v(" 。")])]),v._v(" "),e("h2",{attrs:{id:"为什么代码可以直接在浏览器上运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么代码可以直接在浏览器上运行"}},[v._v("#")]),v._v(" 为什么代码可以直接在浏览器上运行")]),v._v(" "),e("blockquote",[e("p",[v._v("在开发环境时，我们使用 "),e("code",[v._v("vite")]),v._v(" 开发，是无需打包的，直接利用浏览器对 "),e("code",[v._v("ESM")]),v._v(" 的支持，就可以访问我们写的组件代码，但是一些组件代码文件往往不是 "),e("code",[v._v("JS")]),v._v(" 文件，而是 "),e("code",[v._v(".ts、.tsx、.vue")]),v._v(" 等类型的文件。这些文件浏览器肯定直接是识别不了的。")])]),v._v(" "),e("p",[e("img",{attrs:{src:"/dovis-blog/other/94.png",alt:"img"}})]),v._v(" "),e("blockquote",[e("p",[v._v("我们可以观察到 "),e("code",[v._v("vue")]),v._v(" 这个第三方包的访问路径改变了，变成了 "),e("code",[v._v("node_modules/.vite")]),v._v(" 下的一个 "),e("code",[v._v("vue")]),v._v(" 文件，这里真正访问的文件就是前面我们提到的，"),e("code",[v._v("vite")]),v._v(" 会对第三方依赖进行依赖预构建所生成的缓存文件。"),e("strong",[e("code",[v._v("ESM")]),v._v(" 不支持裸模块，"),e("code",[v._v("ESM")]),v._v(" 只能接受 "),e("code",[v._v("Content-Type")]),v._v(" 为 "),e("code",[v._v("application/javascript")]),v._v(" 类型")])])]),v._v(" "),e("blockquote",[e("p",[e("code",[v._v("npm")]),v._v(" 包中大量的 "),e("code",[v._v("ESM")]),v._v(" 代码，大量的 "),e("code",[v._v("import")]),v._v(" 请求，会造成网络拥塞。"),e("code",[v._v("Vite")]),v._v(" 使用 "),e("code",[v._v("esbuild")]),v._v("，将有大量内部模块的 "),e("code",[v._v("ESM")]),v._v(" 关系转换成单个模块，以减少 "),e("code",[v._v("import")]),v._v(" 模块请求次数。")])]),v._v(" "),e("p",[v._v("浏览器也对 "),e("code",[v._v("App.vue")]),v._v(" 发起了访问，简化后的代码：")]),v._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("const")]),v._v(" _sfc_main "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[v._v("name")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[v._v("'App'")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// vue 提供的一些API，用于生成block、虚拟DOM")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("import")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v(" openBlock "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("as")]),v._v(" _openBlock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" createElementBlock "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("as")]),v._v(" _createElementBlock "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("from")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"/node_modules/.vite/vue.js?v=b618a526"')]),v._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("_sfc_render")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("_ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" _cache"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" $props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" $setup"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" $data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" $options")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("_openBlock")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("_createElementBlock")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"h1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"App"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 组件的render方法")]),v._v("\n_sfc_main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("render "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" _sfc_render"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("export")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("default")]),v._v(" _sfc_main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br"),e("span",{staticClass:"line-number"},[v._v("2")]),e("br"),e("span",{staticClass:"line-number"},[v._v("3")]),e("br"),e("span",{staticClass:"line-number"},[v._v("4")]),e("br"),e("span",{staticClass:"line-number"},[v._v("5")]),e("br"),e("span",{staticClass:"line-number"},[v._v("6")]),e("br"),e("span",{staticClass:"line-number"},[v._v("7")]),e("br"),e("span",{staticClass:"line-number"},[v._v("8")]),e("br"),e("span",{staticClass:"line-number"},[v._v("9")]),e("br"),e("span",{staticClass:"line-number"},[v._v("10")]),e("br"),e("span",{staticClass:"line-number"},[v._v("11")]),e("br"),e("span",{staticClass:"line-number"},[v._v("12")]),e("br")])]),e("blockquote",[e("p",[e("strong",[v._v("当用户访问 "),e("code",[v._v("vite")]),v._v(" 提供的开发服务器时，对于浏览器不能直接识别的文件，服务器的一些中间件会将此类文件转换成浏览器认识的文件，从而保证正常访问。")])])]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),e("p",[v._v("其他文件转换：")]),v._v(" "),e("ul",[e("li",[v._v("将图片转为 "),e("code",[v._v("base64")]),v._v(" 格式，在 "),e("code",[v._v("Vite")]),v._v(" 当中，只有图片足够小才会使用 "),e("code",[v._v("base64")]),v._v(" 的格式")])])]),v._v(" "),e("h1",{attrs:{id:"rollup-学习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rollup-学习"}},[v._v("#")]),v._v(" Rollup 学习")]),v._v(" "),e("h2",{attrs:{id:"为什么-rollup-产物那么干净"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么-rollup-产物那么干净"}},[v._v("#")]),v._v(" 为什么 Rollup 产物那么干净")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("rollup")]),v._v(" 只对 "),e("code",[v._v("ESM")]),v._v(" 模块进行打包，对于 "),e("code",[v._v("cjs")]),v._v(" 模块也会通过插件将其转化为 "),e("code",[v._v("ESM")]),v._v(" 模块进行打包。所以不会像 "),e("code",[v._v("webpack")]),v._v(" 有很多的代码注入。")]),v._v(" "),e("li",[e("code",[v._v("rollup")]),v._v(" 对打包结果也支持多种 "),e("code",[v._v("format")]),v._v(" 的输出，比如："),e("code",[v._v("esm、cjs、am")]),v._v(" 等等，但是 "),e("code",[v._v("rollup")]),v._v(" 并不保证代码可靠运行，需要运行环境可靠支持。比如我们输出 "),e("code",[v._v("esm")]),v._v(" 规范代码，代码运行时完全依赖高版本浏览器原生去支持 "),e("code",[v._v("esm")]),v._v("，"),e("code",[v._v("rollup")]),v._v(" 不会像 "),e("code",[v._v("webpack")]),v._v(" 一样注入一系列兼容代码。")]),v._v(" "),e("li",[e("code",[v._v("rollup")]),v._v(" 实现了强大的 "),e("code",[v._v("tree-shaking")]),v._v(" 能力。")])]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),e("p",[v._v("优点：")]),v._v(" "),e("ul",[e("li",[v._v("支持动态导入。")]),v._v(" "),e("li",[v._v("支持 "),e("code",[v._v("tree shaking")]),v._v(": 仅加载模块里用得到的函数以减小文件大小。")]),v._v(" "),e("li",[e("code",[v._v("Scope Hoisting")]),v._v(":  "),e("code",[v._v("rollup")]),v._v(" 可以将所有小文件生成到一个大文件中，所有代码都在同一个函数作用域里: 不会像 "),e("code",[v._v("Webpack")]),v._v(" 那样用很多函数来包装模块。")]),v._v(" "),e("li",[v._v("没有其他冗余代码, 执行很快。除了必要的 "),e("code",[v._v("cjs")]),v._v(", "),e("code",[v._v("umd")]),v._v(" 头外，"),e("code",[v._v("bundle")]),v._v(" 代码基本和源码差不多，也没有奇怪的 "),e("code",[v._v("__webpack_require__")]),v._v(", "),e("code",[v._v("Object.defineProperty")]),v._v(" 之类的东西。")])]),v._v(" "),e("p",[v._v("缺点：")]),v._v(" "),e("ul",[e("li",[v._v("不支持热更新功能；对于 "),e("code",[v._v("commonjs")]),v._v(" 模块，需要额外的插件将其转化为 "),e("code",[v._v("es2015")]),v._v(" 供 "),e("code",[v._v("rollup")]),v._v(" 处理；")]),v._v(" "),e("li",[v._v("无法进行公共代码拆分。")])]),v._v(" "),e("p",[v._v("适用场景：\n由纯 "),e("code",[v._v("js")]),v._v(" 开发的第三方库； 需要生成单一的 "),e("code",[v._v("umd")]),v._v(" 文件的场景")])]),v._v(" "),e("h1",{attrs:{id:"babel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#babel"}},[v._v("#")]),v._v(" Babel")]),v._v(" "),e("h2",{attrs:{id:"运行原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行原理"}},[v._v("#")]),v._v(" 运行原理")]),v._v(" "),e("ol",[e("li",[v._v("解析：将代码字符串解析成抽象语法树("),e("code",[v._v("AST")]),v._v("), 在解析过程中有两个阶段：词法分析和语法分析，词法分析阶段把字符串形式的代码转换为令牌（"),e("code",[v._v("tokens")]),v._v("）流，令牌类似于 "),e("code",[v._v("AST")]),v._v(" 中节点；而语法分析阶段则会把一个令牌流转换成 "),e("code",[v._v("AST")]),v._v(" 的形式，同时这个阶段会把令牌中的信息转换成 "),e("code",[v._v("AST")]),v._v(" 的表述结构。")]),v._v(" "),e("li",[v._v("转换：接收 "),e("code",[v._v("AST")]),v._v(" 并对其进行遍历，对结点进行添加更新移除等操作。")]),v._v(" "),e("li",[v._v("生成：把经过一系列转换后的 "),e("code",[v._v("AST")]),v._v(" 重新转换成字符串形式的代码，同时还会创建源码映射。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);