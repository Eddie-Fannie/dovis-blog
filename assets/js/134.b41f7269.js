(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{406:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"generator-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generator-函数"}},[t._v("#")]),t._v(" Generator 函数")]),t._v(" "),s("p",[t._v("形式上，"),s("code",[t._v("Generator")]),t._v("函数是一个普通函数，有两个特征：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("function")]),t._v("命令和函数名之间有一个星号")]),t._v(" "),s("li",[t._v("函数体内部使用"),s("code",[t._v("yield")]),t._v("语句定义不同的内部状态。")])]),t._v(" "),s("p",[s("code",[t._v("Generator")]),t._v("函数的调用方法和普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用"),s("code",[t._v("Generator")]),t._v("函数后，该函数不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象。（遍历器对象）。下一步，必须调用遍历器对象的"),s("code",[t._v("next")]),t._v("方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个"),s("code",[t._v("yield")]),t._v("表达式（或"),s("code",[t._v("return")]),t._v("语句）为止。换言之，"),s("code",[t._v("Generator")]),t._v("函数是分段执行的，"),s("code",[t._v("yield")]),t._v("表达式是暂停执行的标记，而"),s("code",[t._v("next")]),t._v("方法可以恢复执行。")]),t._v(" "),s("h2",{attrs:{id:"yield表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yield表达式"}},[t._v("#")]),t._v(" "),s("code",[t._v("yield")]),t._v("表达式")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => {value: 6, done: false}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => {value: 8, done: false}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => {value: 42, done: true}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("第一次调用，"),s("code",[t._v("Generator")]),t._v("函数开始执行，直到遇到第一个"),s("code",[t._v("yield")]),t._v("表达式为止。"),s("code",[t._v("next")]),t._v("方法返回一个对象，它的"),s("code",[t._v("value")]),t._v("属性就是当前"),s("code",[t._v("yield")]),t._v("表达式的值为"),s("code",[t._v("6")]),t._v(","),s("code",[t._v("done")]),t._v("属性的值为"),s("code",[t._v("false")]),t._v("，表示遍历还没有结束。")]),t._v(" "),s("p",[t._v("下一次调用"),s("code",[t._v("next")]),t._v("方法时，再继续往下执行，直到遇到下一个"),s("code",[t._v("yield")]),t._v("表达式。")]),t._v(" "),s("p",[t._v("当执行第二次 "),s("code",[t._v("next")]),t._v(" 时，传入的参数等于上一个 "),s("code",[t._v("yield")]),t._v(" 的返回值，如果你不传参，"),s("code",[t._v("yield")]),t._v(" 永远返回 "),s("code",[t._v("undefined")]),t._v("。此时 "),s("code",[t._v("let y = 2 * 12")]),t._v("，所以第二个 "),s("code",[t._v("yield")]),t._v(" 等于 "),s("code",[t._v("2 * 12 / 3 = 8")])]),t._v(" "),s("p",[t._v("当执行第三次 "),s("code",[t._v("next")]),t._v(" 时，传入的参数会传递给 "),s("code",[t._v("z")]),t._v("，所以 "),s("code",[t._v("z = 13, x = 5, y = 24")]),t._v("，相加等于 "),s("code",[t._v("42")])]),t._v(" "),s("p",[t._v("如果没有遇到新的"),s("code",[t._v("yield")]),t._v("表达式，就一直运行到函数结束，直到"),s("code",[t._v("return")]),t._v("语句为止，并将"),s("code",[t._v("return")]),t._v("语句后面的表达式的值，作为返回对象的"),s("code",[t._v("value")]),t._v("属性值。")]),t._v(" "),s("p",[t._v("如果该函数没有"),s("code",[t._v("return")]),t._v("语句，则返回的对象"),s("code",[t._v("value")]),t._v("属性值为"),s("code",[t._v("undefined")])])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("yield")]),t._v("表达式与"),s("code",[t._v("return")]),t._v("语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到"),s("code",[t._v("yield")]),t._v("，函数暂停执行，下一次再从该位置继续向后执行，而"),s("code",[t._v("return")]),t._v("语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）"),s("code",[t._v("return")]),t._v("语句，但是可以执行多次（或者说多个）"),s("code",[t._v("yield")]),t._v("表达式。正常函数只能返回一个值，因为只能执行一次"),s("code",[t._v("return")]),t._v("；"),s("code",[t._v("Generator")]),t._v(" 函数可以返回一系列的值，因为可以有任意多个"),s("code",[t._v("yield")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"注意的点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意的点"}},[t._v("#")]),t._v(" 注意的点")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("Generator")]),t._v("函数可以不用"),s("code",[t._v("yield")]),t._v("表达式，这时就变成一个单纯的暂缓执行函数")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'执行了'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" generator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    generator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("blockquote",[s("p",[t._v("上面代码中，函数"),s("code",[t._v("f")]),t._v("如果是普通函数，在为变量"),s("code",[t._v("generator")]),t._v("赋值时就会执行。但是，函数"),s("code",[t._v("f")]),t._v("是一个 "),s("code",[t._v("Generator")]),t._v(" 函数，就变成只有调用"),s("code",[t._v("next")]),t._v("方法时，函数"),s("code",[t._v("f")]),t._v("才会执行。")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("code",[t._v("yield")]),t._v("表达式只能用在"),s("code",[t._v("Generator")]),t._v("函数里面，用在其他地方都会报错。")]),t._v(" "),s("li",[s("code",[t._v("yield")]),t._v("表达式如果用在另一个表达式之中，必须放在圆括号里。")]),t._v(" "),s("li",[s("code",[t._v("yield")]),t._v("表达式用作函数参数或放在赋值表达式的右边，可以不加括号。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);