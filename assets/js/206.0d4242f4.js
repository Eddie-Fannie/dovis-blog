(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{480:function(e,t,v){"use strict";v.r(t);var _=v(10),o=Object(_.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"《深入浅出vite》学习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#《深入浅出vite》学习"}},[e._v("#")]),e._v(" 《深入浅出vite》学习")]),e._v(" "),t("h2",{attrs:{id:"快速上手-如何用vite从零搭建前端项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快速上手-如何用vite从零搭建前端项目"}},[e._v("#")]),e._v(" 快速上手：如何用vite从零搭建前端项目？")]),e._v(" "),t("ol",[t("li",[e._v("需要注意的是，在 "),t("code",[e._v("Vite")]),e._v(" 项目中，一个 "),t("code",[e._v("import")]),e._v(" 语句即代表一个 "),t("code",[e._v("HTTP")]),e._v(" 请求。上述两个语句则分别代表了两个不同的请求，"),t("code",[e._v("Vite Dev Server")]),e._v(" 会读取本地文件，返回浏览器可以解析的代码。当浏览器解析到新的 "),t("code",[e._v("import")]),e._v(" 语句，又会发出新的请求，以此类推，直到所有的资源都加载完成。")])]),e._v(" "),t("blockquote",[t("p",[e._v("现在，你应该知道了 "),t("code",[e._v("Vite")]),e._v(" 所倡导的 "),t("code",[e._v("no-bundle")]),e._v(" 理念的真正含义: 利用浏览器原生 "),t("code",[e._v("ES")]),e._v(" 模块的支持，实现开发阶段的 "),t("code",[e._v("Dev Server")]),e._v("，进行模块的按需加载，而不是先整体打包再进行加载。相比 "),t("code",[e._v("Webpack")]),e._v(" 这种必须打包再加载的传统构建模式，"),t("code",[e._v("Vite")]),e._v(" 在开发阶段省略了繁琐且耗时的打包过程，这也是它为什么快的一个重要原因。")])])])}),[],!1,null,null,null);t.default=o.exports}}]);